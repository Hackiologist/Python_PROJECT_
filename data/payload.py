b'IyBmcm9tIHNldHRpbmcgaW1wb3J0IConCmltcG9ydCBzb2NrZXQKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IG9zIApvYiAgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVUICwgc29ja2V0LlNPQ0tfU1RSRUFNKQpob3N0PSI8SVA+Igpwb3J0MT0iPFBPUlQ+Igpwb3J0ID0gaW50KHBvcnQxKQoKIyBDb25uZWN0IHRvIHNlcnZlcgpvYi5jb25uZWN0KChob3N0ICwgcG9ydCkpCgpvcy5zeXN0ZW0oImVjaG8gb2ZmIikKb3Muc3lzdGVtKCJjbHMiKQoKIyBHZXQgUElECnByaW50KCIgIFsrXSBZb3UgUElEIGlzIDogIiAsIG9zLmdldHBpZCgpKQpwcmludCgiICBbK10gUHJlc3MgYW55IGtleSB0byBjb250aW51ZSAuLi4uICIpCgoKZGVmIGZpbGUoZl9uYW1lKToKICAgIHByaW50KGYiW1NlbmQge2ZfbmFtZX0gU3RhcnQgLl0iKQogICAgZXJyb3IgPSAwCiAgICBmID1vcGVuKGZfbmFtZSAsICJyYiIpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGNvbnRlbnQgPSBmLnJlYWRsaW5lKCkKICAgICAgICBpZiBub3QgY29udGVudDoKICAgICAgICAgICAgZXJyb3IgPSAxCiAgICAgICAgICAgIHByaW50KGYiW1NlbmQge2ZfbmFtZX0gZW5kIC5dIikKICAgICAgICAgICAgZi5jbG9zZSgpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgb2Iuc2VuZChjb250ZW50KQoKCmRlZiBpcCgpOgogICAgaG9zdG5hbWUgPSBzb2NrZXQuZ2V0aG9zdG5hbWUoKQogICAgaXAgPSBzb2NrZXQuZ2V0aG9zdGJ5bmFtZShob3N0bmFtZSkKICAgIG1zZzEgPSAoZiIgICBbK10gTXkgaXAgaXMgOiAge2lwfSIpCiAgICBtc2cgPSBtc2cxLmVuY29kZSgpCiAgICBvYi5zZW5kKG1zZykKICAgIApkZWYgcHkoKToKICAgIHRyeToKICAgICAgICBpbXBvcnQgc3lzCiAgICAgICAgYSA9IChmIiAgIFsrXSBUaGUgcHl0aG9uIHZlcnNpb24gaXMgOiB7c3lzLnZlcnNpb25bMDo3XX0iKSAjID09PiAzLjEwLjcKICAgICAgICBiID0gYS5lbmNvZGUoKQogICAgICAgIGMgPSBvYi5zZW5kKGIpCiAgICAgICAgcmV0dXJuIGMKICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gKCJzb210aGluZyBlcnJvciIpIApkZWYgcGxhdGVmb3JtKCk6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHN5cwogICAgICAgIGE9IChmIiAgIFsrXSBUaGUgVmljdGltIHBsYXRlZm9ybSBpcyA6IHtzeXMucGxhdGZvcm19IikKICAgICAgICBiID0gYS5lbmNvZGUoKQogICAgICAgIGMgPSBvYi5zZW5kKGIpCiAgICAgICAgcmV0dXJuIGMKICAgIGV4Y2VwdDoKICAgICAgICByZXR1cm4gKCJzb210aGluZyBlcnJvciIpIAoKZGVmIHVuYW1lKCk6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IG9zCiAgICAgICAgYT0gKGYiICAgWytdIFRoZSBWaWN0aW0gVXNlci1uYW1lIGlzIDoge29zLmdldGxvZ2luKCl9IikgIyA9PiBnZXQgdXNlcm5hbWUKICAgICAgICBiID0gYS5lbmNvZGUoKQogICAgICAgIGMgPSBvYi5zZW5kKGIpCiAgICAgICAgcmV0dXJuIGMKICAgIGV4Y2VwdDoKICAgICAgICBwcmludCgic29tdGhpbmcgZXJyb3IiKSAKZGVmIGNtZCgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjd2QgPSBzdWJwcm9jZXNzLmNoZWNrX291dHB1dCgiY2QiICxzdGRpbj1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlNURE9VVCwgc2hlbGw9VHJ1ZSApCiAgICAgICAgb2Iuc2VuZChjd2QpCiAgICAgICAgY21kID0gb2IucmVjdigxMDI0KS5kZWNvZGUoKQogICAgICAgIGlmIChjbWQgPT0gImV4aXQiKToKICAgICAgICAgICAgYnJlYWsKICAgICAgICBwcmludChmIlsgUmVjdiBdIGNvbW1hbmQge2NtZH0iKQogICAgICAgIHRyeToKICAgICAgICAgICAgb3V0ID0gc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoY21kICxzdGRpbj1zdWJwcm9jZXNzLlBJUEUsIHN0ZGVycj1zdWJwcm9jZXNzLlNURE9VVCwgc2hlbGw9VHJ1ZSApCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBvdXQgPSBmIlsgRVJST1IgXSB7ZX0iLmVuY29kZSgpCiAgICAgICAgCiAgICAgICAgaWYgKGNtZFs6Ml0gPT0gImNkIik6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIG9zLmNoZGlyKGNtZFszOl0pCiAgICAgICAgICAgICAgICBwcmludCgiRGlyZWN0b3J5IGNoYW5nZWQiKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBwcmludChmIltFUlJPUl0ge2V9IikKICAgICAgICBlbGlmIChjbWRbOjNdID09ICJkZWwiKToKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKGNtZFs0Ol0pCiAgICAgICAgICAgICAgICBwcmludCgiRGlyZWN0b3J5IFJlbW92ZWQiKQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGY6CiAgICAgICAgICAgICAgICBwcmludChmIltFUlJPUl0ge2Z9IikKCiAgICAgICAgaWYobGVuKG91dCkgPT0gMCk6CiAgICAgICAgICAgIG91dCA9ICJPSyIuZW5jb2RlKCkKICAgICAgICBvYi5zZW5kKG91dCkKICAgICAgICAKd2hpbGUgVHJ1ZToKICAgICMgIFJFQ0lFVkUgTVNHIEZST00gU2VydmVyID4+PgogICAgYiA9IG9iLnJlY3YoMTAyNCkuZGVjb2RlKCkKICAgIAogICAgaWYoYiA9PSAiZXhpdCIpOgogICAgICAgIG9iLmNsb3NlKCkKICAgICAgICBicmVhawogICAgZWxpZihiID09ICJnZXQgaXAiKToKICAgICAgICBpcCgpCiAgICBlbGlmKGIgPT0gImdldCBweXRob24gLXYiKToKICAgICAgICBweSgpCiAgICBlbGlmKGIgPT0gImdldCBwbGF0ZWZvcm0iKToKICAgICAgICBwbGF0ZWZvcm0oKQogICAgZWxpZihiID09ICJnZXQgdXNlcm5hbWUiKToKICAgICAgICB1bmFtZSgpCiAgICBlbGlmKGIgPT0gImdldCByZXYiICk6CiAgICAgICAgY21kKCkKICAgIGVsaWYoYlswOjRdID09ICJkb3duIik6CiAgICAgICAgZmkgPSBiWzU6XQogICAgICAgIGZpbGUoZmkpCiAgICBlbHNlOgogICAgICAgIGEgPSAiRW50ZXIgY29ycmVjdCBzcGxsaW5nIgogICAgICAgIGIgPSBhLmVuY29kZSgpCiAgICAgICAgb2Iuc2VuZChiKQoKICAgICMgcHJpbnQoYikn'
